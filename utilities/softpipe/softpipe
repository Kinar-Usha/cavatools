#!/usr/bin/python3
#
#  Copyright (c) 2020 Peter Hsu.  All Rights Reserved.  See LICENCE file for details.
#
#  Algorithm from https://apps.dtic.mil/dtic/tr/fulltext/u2/a163195.pdf
#    Peter Yan-Tek Hsu, "Highly Concurrent Scalar Processing,"
#    PhD Dissertation, University of Illinois at Urbana-Champaign, 1986
#
#  Usage:  softpipe < loop.def > prog.h
#
#  See vnv_spmv.def, vnv_spmv.h and ComputeSPVM.cpp for example usage
#

import sys
import re

SpecPattern = re.compile(r'^\s*([0-9]+)\s+(.*)')
IterPattern = re.compile(r'^\?iter=(\w+)')
LimitPattern = re.compile(r'^\?limit=(\w+)')
VarPattern = re.compile(r'^(.+)\s+([a-zA-Z_][a-zA-Z_0-9]*)\$')
CmdPattern = re.compile(r'^\?([a-z]+)=([a-zA-Z_][a-zA-Z_0-9]*)')

lines = []
for l in sys.stdin:
    lines.insert(0, l.rstrip('\r\n'))

lv = 'NONE'
limit = 'NONE'
pipe = {}
depth = 0

vectors = []
perm = []

def error(line):
    sys.stderr.write('Unrecognized line:\n')
    sys.stderr.write(line+'\n')
    exit(1)


def PrintPipe(body):
    for stage in range(depth):
        stmt = '      Stage("{:2d}:")  '.format(stage)
        stmts = body[stage]
        for a in stmts:
            stmt += '  '+a
        print(stmt)
        
def Substitute(src, dollar, at):
    if at == 0:
        at = str(dollar)
    else:
        at = str(dollar) + str(at)
    dst = []
    for e in src:
        f = e.replace('$', '_'+str(dollar))
        f = f.replace('@', at)
        dst.append(f)
    return dst


def GenEpilog(n):
    epi = [ None ]*2*depth
    for j in range(2*depth):
        epi[j] = {}
    for j in range(depth):
        for i in perm[j]:
            at = -depth
            if (i+j)%depth >= j:
                at = 0
            for stmt in Substitute(pipe[j], i, at):
                stage = (i+j) % depth
                if stmt not in epi[stage] and not (i>=n and i+j<depth):
                    epi[stage][stmt] = 1
                if stmt not in epi[stage+depth] and not (i>=n or i+j<depth):
                    epi[stage+depth][stmt] = 1
    return epi


def GenProlog(n, depth):
    pro = [ None ]*2*depth
    for j in range(2*depth):
        pro[j] = {}
    for j in range(depth):
        for i in perm[j]:
            at = -depth
            if (i+j)%depth >= j:
                at = 0
            for stmt in Substitute(pipe[j], i, 0):
                stage = (i+j) % depth
                if stmt not in pro[stage] and not (i>n or i+j>=depth):
                    pro[stage][stmt] = 1
                if stmt not in pro[stage+depth] and not (i>n or i+j<depth):
                    pro[stage+depth][stmt] = 1
    return pro


def GenerateSoftwarePipeline():
    # Generate vector variable declarations
    for (var, decl) in vectors:
        vec = []
        for i in range(depth):
            vec.append(var+str(i))
        comma = ', '
        decl += ' ' + comma.join(vec)
        print('  '+decl+';')
        
    print('  if ({:s} < {:d}) {{  /* Single Pass */'.format(limit, depth))
    # Generate special short tripcount cases
    #   stmt[stage] = {} (key=statement, value=lowest remaining case to execute)
    #     stage  = software pipeline stage, 0..2*depth-1
    stmt = [ None ]*2*depth
    for trips in range(depth-1):
        pro = GenProlog(trips, depth)
        for stage in range(2*depth):
            for s in pro[stage].keys():
                if stmt[stage] == None:
                    stmt[stage] = {}
                if s not in stmt[stage]:
                    stmt[stage][s] = trips
                elif stmt[stage][s] > trips:
                    stmt[stage][s] = trips
    for stage in range(2*depth):
        if stmt[stage] != None:
            buckets = {}
            always = []
            for a in stmt[stage].keys():
                r = stmt[stage][a]
#                if r == 0:
#                    always.append(a)
#                    continue
                if r not in buckets:
                    buckets[r] = []
                buckets[r].append(a)
            ifstmt = ''
            for a in always:
                ifstmt += a+'  '
            for r in reversed(sorted(buckets.keys())):
                ifstmt += 'if ({:s}>{:d}) {{'.format(limit, r)
                for a in buckets[r]:
                    ifstmt += '  '+a
                ifstmt += ' }  '
            if ifstmt != '':
                ifstmt = '      Stage("{:2d}:")  '.format(stage) + ifstmt
                print(ifstmt)
    print('  }')
    print('  else {')
    
    # Generate pipeline prologue
    stages = [ None ]*depth
    for j in range(depth):
        stages[j] = []
    for j in range(depth):
        for i in perm[j]:
            if (i+j)%depth < i:
                continue
            stages[(i+j)%depth] += Substitute(pipe[j], i, 0)
    print('    { /* Prologue */')
    PrintPipe(stages)
    print('    }')

    # Generate pipeline body
    stages = [ None ]*depth
    for j in range(depth):
        stages[j] = []
    for j in range(depth):
        for i in perm[j]:
            at = -depth
            if (i+j)%depth >= j:
                at = 0
            stages[(i+j)%depth] += Substitute(pipe[j], i, at)
    print('    /*   Body */')
    print('    for ({:s}+={:d}; {:s}+{:d}<{:s}; {:s}+={:d}) {{'.format(lv, depth, lv, depth-1, limit, lv, depth))
    PrintPipe(stages)
    print('    }')

    # Generate pipeline epilogue
    #   stmt[stage] = {} (key=statement, value=highest remaining case to execute)
    #     stage  = software pipeline stage, 0..2*depth-1
    print('    { /* Epilogue */')
    stmt = [ None ]*2*depth
    for remaining in range(depth-1, -1, -1):
        epi = GenEpilog(remaining)
        for stage in range(2*depth):
            for s in epi[stage].keys():
                if stmt[stage] == None:
                    stmt[stage] = {}
                if s not in stmt[stage]:
                    stmt[stage][s] = remaining
                elif stmt[stage][s] > remaining:
                    stmt[stage][s] = remaining
    for stage in range(2*depth):
        if stmt[stage] != None:
            buckets = {}
            always = []
            for a in stmt[stage].keys():
                r = stmt[stage][a]
                if r == 0:
                    always.append(a)
                    continue
                if r not in buckets:
                    buckets[r] = []
                buckets[r].append(a)
            ifstmt = ''
            for a in always:
                ifstmt += a+'  '
            for r in reversed(sorted(buckets.keys())):
                ifstmt += 'if ({:s}-{:s}>{:d}) {{'.format(limit, lv, r-1)
                for a in buckets[r]:
                    ifstmt += '  '+a
                ifstmt += ' }  '
            if ifstmt != '':
                ifstmt = '      Stage("{:2d}:")  '.format(stage) + ifstmt
                print(ifstmt)
    print('    }')
    print('  }')



    
while lines:
    line = lines.pop()
    if line != '' and line[0] != '?':
        print(line)
    elif line == '?{':
        line = lines.pop()
        while line != '?}':
            m = VarPattern.match(line)
            if not m:
                error(line)
            (declaration, variable) = m.groups()
            vectors.append( (variable+'_', declaration) )
            line = lines.pop()
    elif line == '?[':
        line = lines.pop()
        while line != '?]':
            m = SpecPattern.match(line)
            if not m:
                error(line)
            (stage, statement) = m.groups()
            stage = int(stage)
            statement = statement.lstrip()
            statement = statement.rstrip()
            if stage not in pipe:
                pipe[stage] = []
            pipe[stage].append(statement)
            line = lines.pop()
        if stage > depth:
            depth = stage
        depth += 1
        
        # Generate permutation table
        perm = [None]*depth
        for i in range(depth):
            perm[i] = list(range(i, depth)) + list(range(0, i))
            
        for i in range(depth):
            if not i in pipe:
                pipe[i] = []
        GenerateSoftwarePipeline()
        
    else:
        m = CmdPattern.match(line)
        if m:
            cmd, value = m.groups()
            if cmd == 'limit':
                limit = value
            elif cmd == 'iter':
                lv = value
            else:
                error(line)
        else:
            print(line)




    

