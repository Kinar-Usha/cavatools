#!/usr/bin/env python
#
#  Copyright (c) 2020 Peter Hsu.  All Rights Reserved.  See LICENCE file for details.
#

import re
import sys
import subprocess

list = subprocess.run(["ausyscall", "--dump"], capture_output=True, text=True).stdout
list = "".join(list)
list = list.split('\n')
x86 = {}
x86_highest = -1
for line in list[1:]:
    if not line:
        continue
    (number, name) = line.split()
    number = int(number)
    x86[name] = number
    if number > x86_highest:
        x86_highest = number
riscv = {}
riscv_highest = -1
for line in sys.stdin:
    tuple = line.split()
    if len(tuple) != 2:
        continue
    (name, number) = tuple
    number = int(number)
    riscv[name] = number
    if number > riscv_highest:
        riscv_highest = number

map = [(-1, '0')]*(riscv_highest+1)
for name in riscv:
    number = riscv[name]
    if name in x86:
        map[number] = (x86[name], '"SYS_'+name+'"')
    else:
        map[number] = (-2, '0')

for i in range(riscv_highest+1):
    (number, name) = map[i]
    print('  /* {:d} */ {{ {:d}, {:s} }},'.format(i, number, name))
print('#define HIGHEST_ECALL_NUM  {:d}'.format(riscv_highest))
print('#warning HIGHEST_ECALL_NUM  {:d}'.format(riscv_highest))
exit(0)



#PKpattern = re.compile(r'#define\s+SYS_(\S+)\s+(\d+)')
#RVpattern = re.compile(r'#define\s+TARGET_NR_(\S+)\s+(\d+)')

RVpattern = re.compile(r'#define\s+__NR_(\S+)\s+(\d+)')

# Algorith is we make table of RISC-V system call names and record
# their numbers, create a C file of names, include the host x86
# 'asm/unistd_64.h' file to get the correct mapping.

ecall = {}
enames = {}
highest = -1

#result = subprocess.run(["ausyscall", "--dump"], stdout=subprocess.PIPE)
#list = result.stdout.decode('utf-8')
list = subprocess.run(["ausyscall", "--dump"], capture_output=True, text=True).stdout
list = "".join(list)
list = list.split('\n')
highest = -1
for line in list[1:]:
    if not line:
        continue
    (number, name) = line.split()
    number = int(number)
    if number > highest:
        highest = number
    print('#ifdef __NR_{:s}'.format(name))
    print('  [__NR_{:22s}] = {{ {:d}, "{:s}" }},'.format(name, number, name))
#    print('#ifdef SYS_{:s}'.format(name))
#    print('  [SYS_{:22s}] = {{ {:d}, "{:s}" }},'.format(name, number, name))
    print('#else')
    print('#warning Ecall {:s}={:d} does not have __NR_{:s}'.format(name, number, name))
#    print('#warning Ecall {:s}={:d} does not have SYS_{:s}'.format(name, number, name))
    print('#endif')
print('#define HIGHEST_ECALL_NUM  {:d}'.format(highest))
print('#warning HIGHEST_ECALL_NUM  {:d}'.format(highest))
exit(0)



with open(sys.argv[1]) as rv:
    for line in rv:
        line = line.rstrip()
        m = RVpattern.match(line)
        if m:
            (name, num) = m.groups()
            num = int(num)
            ecall[num] = name
            enames[name] = num
            highest = max(num, highest)
        else:
            print(line)

with open('ecall_nums.h', 'w') as en:
    for name in sorted(enames.keys()):
        en.write('#ifndef __NR_{:s}\n'.format(name))
        en.write('#define __NR_{:s}  -2\n'.format(name))
        en.write('#endif\n')
    for n in range(0, highest+1):
        if n in ecall:
            name = ecall[n]
            en.write('/* {:5d} */ {{ __NR_{:s}, "{:s}" }},\n'.format(n, name, name))
        else:
            en.write('/* {:5d} */ {{ -1, 0 }},\n'.format(n))
    en.write('\n#define rv_syscall_entries {:d}\n'.format(highest+1))

exit(0)


with open(sys.argv[1]) as rv:
    for line in rv:
        m = PKpattern.match(line)
        if m:
            name, num = m.groups()
            num = int(num)
            ecall[num] = name
            enames[name] = num
            highest = max(num, highest)

if len(sys.argv) > 2:
    with open(sys.argv[2]) as rv:
        for line in rv:
            m = RVpattern.match(line)
            if m:
                name, num = m.groups()
                num = int(num)
                if num in ecall and name != ecall[num]:
                    print('libc {:s} override pk {:s} ecall'.format(name, ecall[num]))
                    ecall[num] = name
                    enames[name] = num
                    highest = max(num, highest)

with open('ecall_nums.h', 'w') as en:
    for name in sorted(enames.keys()):
        en.write('#ifndef __NR_{:s}\n'.format(name))
        en.write('#define __NR_{:s}  -2\n'.format(name))
        en.write('#endif\n')
    for n in range(0, highest+1):
        if n in ecall:
            name = ecall[n]
            en.write('/* {:5d} */ {{ __NR_{:s}, "{:s}" }},\n'.format(n, name, name))
        else:
            en.write('/* {:5d} */ {{ -1, 0 }},\n'.format(n))
    en.write('\n#define rv_syscall_entries {:d}\n'.format(highest+1))

