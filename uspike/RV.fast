{
  "c.addi4spn"	: { "fast":"wrd(r1+imm)" },
  "c.lw"	: { "fast":"wrd(MMU.load_int32(r1+imm))" },
  "c.ld"	: { "fast":"wrd(MMU.load_int64(r1+imm))" },
  "c.sw"	: { "fast":"MMU.store_int32(r1+imm, r2)" },
  "c.sd"	: { "fast":"MMU.store_int64(r1+imm, r2)" },
  "c.addi"	: { "fast":"wrd(r1 + imm)" },
  "c.addiw"	: { "fast":"wrd(int32_t(r1) + int32_t(imm))" },

  "c.li"	: { "fast":"wrd(imm)" },
  "c.addi16sp"	: { "fast":"wrd(r1+imm)" },
  "c.lui"	: { "fast":"wrd(imm)" },
  "c.srli"	: { "fast":"wrd(uint64_t(r1) >> imm)" },
  "c.srai"	: { "fast":"wrd( int64_t(r1) >> imm)" },
  "c.andi"	: { "fast":"wrd(r1 & imm)" },
  "c.subw"	: { "fast":"wrd(int32_t(r1) - int32_t(r2))" },

  "c.addw"	: { "fast":"wrd(int32_t(r1) + int32_t(r2))" },
  "c.j"		: { "fast":"wpc(pc+imm); break" },
  "c.beqz"	: { "fast":"if (r1==0) { wpc(pc+imm); break; }" },
  "c.bnez"	: { "fast":"if (r1!=0) { wpc(pc+imm); break; }" },
  "c.slli"	: { "fast":"wrd(uint64_t(r1) << imm)" },
  "c.lwsp"	: { "fast":"wrd(MMU.load_int32(r1+imm))" },
  "c.ldsp"	: { "fast":"wrd(MMU.load_int64(r1+imm))" },
  "c.jr"	: { "fast":"wpc(r1); break" },
  "c.mv"	: { "fast":"wrd(r2)" },
  "c.jalr"	: { "fast":"{ long t=pc+2; wpc(r1); wrd(t); break; }" },
  "c.add"	: { "fast":"wrd(r1 + r2)" },
  "c.swsp"	: { "fast":"MMU.store_int32(r1+imm, r2)" },
  "c.sdsp"	: { "fast":"MMU.store_int64(r1+imm, r2)" },

  "lui"		: { "fast":"wrd(imm)" },
  "auipc"	: { "fast":"wrd(pc + imm)" },
  "jal"		: { "fast":"{ long t=pc+4; wpc(pc+imm);     wrd(t); break; }" },
  "jalr"	: { "fast":"{ long t=pc+4; wpc((r1+imm)&~1L); wrd(t); break; }" },
  "beq"		: { "fast":"if ( int64_t(r1)== int64_t(r2)) { wpc(pc+imm); break; }" },
  "bne"		: { "fast":"if ( int64_t(r1)!= int64_t(r2)) { wpc(pc+imm); break; }" },
  "blt"		: { "fast":"if ( int64_t(r1)<  int64_t(r2)) { wpc(pc+imm); break; }" },
  "bge"		: { "fast":"if ( int64_t(r1)>= int64_t(r2)) { wpc(pc+imm); break; }" },
  "bltu"	: { "fast":"if (uint64_t(r1)< uint64_t(r2)) { wpc(pc+imm); break; }" },
  "bgeu"	: { "fast":"if (uint64_t(r1)>=uint64_t(r2)) { wpc(pc+imm); break; }" },
  "lb"		: { "fast":"wrd(MMU.load_int8  (r1+imm))" },
  "lh"		: { "fast":"wrd(MMU.load_int16 (r1+imm))" },
  "lw"		: { "fast":"wrd(MMU.load_int32 (r1+imm))" },
  "ld"		: { "fast":"wrd(MMU.load_int64 (r1+imm))" },
  "lbu"		: { "fast":"wrd(MMU.load_uint8 (r1+imm))" },
  "lhu"		: { "fast":"wrd(MMU.load_uint16(r1+imm))" },
  "lwu"		: { "fast":"wrd(MMU.load_uint32(r1+imm))" },
  "sb"		: { "fast":"MMU.store_int8 (r1+imm, r2)" },
  "sh"		: { "fast":"MMU.store_int16(r1+imm, r2)" },
  "sw"		: { "fast":"MMU.store_int32(r1+imm, r2)" },
  "sd"		: { "fast":"MMU.store_int64(r1+imm, r2)" },
  "addi"	: { "fast":"wrd(r1 + imm)" },
  "addiw"	: { "fast":"wrd( int32_t(r1) +  int32_t(imm))" },
  "slti"	: { "fast":"wrd( int64_t(r1) <  int64_t(imm))" },
  "sltiu"	: { "fast":"wrd(uint64_t(r1) < uint64_t(imm))" },
  "xori"	: { "fast":"wrd(r1 ^ imm)" },
  "ori"		: { "fast":"wrd(r1 | imm)" },
  "andi"	: { "fast":"wrd(r1 & imm)" },
  "slli"	: { "fast":"wrd(uint64_t(r1) << imm)" },
  "srli"	: { "fast":"wrd(uint64_t(r1) >> imm)" },
  "srai"	: { "fast":"wrd( int64_t(r1) >> imm)" },
  "slliw"	: { "fast":"wrd(uint32_t(r1) << imm)" },
  "srliw"	: { "fast":"wrd(uint32_t(r1) >> imm)" },
  "sraiw"	: { "fast":"wrd( int32_t(r1) >> imm)" },
  "add"		: { "fast":"wrd(r1 + r2)" },
  "sub"		: { "fast":"wrd(r1 - r2)" },
  "sll"		: { "fast":"wrd(uint64_t(r1) << uint64_t(r2))" },
  "slt"		: { "fast":"wrd( int64_t(r1) <   int64_t(r2))" },
  "sltu"	: { "fast":"wrd(uint64_t(r1) <  uint64_t(r2))" },
  "xor"		: { "fast":"wrd(r1 ^ r2)" },
  "srl"		: { "fast":"wrd(uint64_t(r1) >> uint64_t(r2))" },
  "sra"		: { "fast":"wrd( int64_t(r1) >>  int64_t(r2))" },
  "or"		: { "fast":"wrd(r1 | r2)" },
  "and"		: { "fast":"wrd(r1 & r2)" },
  "addw"	: { "fast":"wrd( int32_t(r1) +   int32_t(r2))" },
  "subw"	: { "fast":"wrd( int32_t(r1) -   int32_t(r2))" },
  "sllw"	: { "fast":"wrd(uint32_t(r1) << uint32_t(r2))" },
  "srlw"	: { "fast":"wrd(uint32_t(r1) >> uint32_t(r2))" },
  "sraw"	: { "fast":"wrd( int32_t(r1) >>  int32_t(r2))" },
  
  "cas.w"	: { "fast":"if (!cmpswap<int32_t>(pc, p)) { wpc(pc+code.at(pc+4).immed()+4); break; }", "len":12 },
  "cas.d"	: { "fast":"if (!cmpswap<int64_t>(pc, p)) { wpc(pc+code.at(pc+4).immed()+4); break; }", "len":12 },
  "c.cas.w"	: { "fast":"if (!cmpswap<int32_t>(pc, p)) { wpc(pc+code.at(pc+4).immed()+4); break; }", "len":10 },
  "c.cas.d"	: { "fast":"if (!cmpswap<int64_t>(pc, p)) { wpc(pc+code.at(pc+4).immed()+4); break; }", "len":10 },

  "ebreak"	: { "fast":"reason=stop_breakpoint; goto early_stop;" },
  "c.ebreak"	: { "fast":"reason=stop_breakpoint; goto early_stop;" },
  "ecall"	: { "fast":"STATE.pc=pc; if (proxy_ecall(p, cpu->count()+count)) { reason=stop_exited; goto early_stop; }" }
}
