#!/usr/bin/env python

from builtins import hex
from builtins import range
import math
import sys
import re
import os
import json
from collections import OrderedDict

def eprint(*args):
    sys.stderr.write(' '.join(map(str,args)) + '\n')
    
def diffcp(fname):
    if os.path.exists(fname) and os.system('cmp -s newcode.tmp '+fname) == 0:
        os.system('rm newcode.tmp')
    else:
        os.system('mv newcode.tmp '+fname)

with open(sys.argv[1]) as f:
    opcodes = json.load(f, object_pairs_hook=OrderedDict)

regs = {}
regs['cfd']	= ( 2, 3, 'op_rd', '+8+FPREG')
regs['crd']	= ( 2, 3, 'op_rd', '+8+GPREG')
regs['cs2']	= ( 2, 3, 'op.r2', '+8+GPREG')
regs['ds2']	= ( 2, 3, 'op.r2', '+8+FPREG')
regs['fs4']	= ( 2, 5, 'op.r2', '+FPREG')
regs['rs4']	= ( 2, 5, 'op.r2', '+GPREG')
regs['cs1']	= ( 7, 3, 'op_r1', '+8+GPREG')

regs['rd']	= ( 7, 5, 'op_rd', '+GPREG')
regs['fd']	= ( 7, 5, 'op_rd', '+FPREG')
regs['vd']	= ( 7, 5, 'op_rd', '+VPREG')
regs['vs3']	= ( 7, 5, 'op.r3', '+VPREG')

regs['rs1']	= (15, 5, 'op_r1', '+GPREG')
regs['fs1']	= (15, 5, 'op_r1', '+FPREG')
regs['vs1']	= (15, 5, 'op_r1', '+VPREG')

regs['rs2']	= (20, 5, 'op.r2', '+GPREG')
regs['fs2']	= (20, 5, 'op.r2', '+FPREG')
regs['vs2']	= (20, 5, 'op.r2', '+VPREG')

regs['rs3']	= (27, 5, 'op.r3', '+GPREG')
regs['fs3']	= (27, 5, 'op.r3', '+FPREG')

regs['vm']	= (25, 1, 'op_vm', '+VMREG')

errors = 0
for name in opcodes:
    for b in opcodes[name]['bits'].split():
        if re.match('[01]+|\{[^}]+\}', b):
            continue
        if b not in regs:
            eprint('Undefined register', b)
            errors += 1
if errors:  exit(-1)

with open('newcode.tmp', 'w') as f:
    f.write('enum Opcode_t {')
    n = 0
    for name in ['ZERO'] + list(opcodes.keys()) + ['ILLEGAL', 'UNKNOWN']:
        if n % 8 == 0:
            f.write('\n  ')
        f.write('{:24s}'.format('Op_' + name.replace('.','_') + ','))
        n += 1
    f.write('};\n')
diffcp('opcodes.h')

with open('newcode.tmp', 'w') as f:
    for name in opcodes:
        pos = 0
        code = 0
        mask = 0
        registers = []
        immed = []
        bigimm = 0
        for b in reversed(opcodes[name]['bits'].split()):
            if re.match('[01]+', b):
                code |= int(b, 2) << pos
                mask |= ((1<<len(b))-1) << pos
                pos += len(b)
            elif re.match('\{[^}]+\}', b):
                tuple = []
                signed = False
                i = 0
                if b[1] == '-':
                    signed = True
                    i = 1
                while b[i] != '}':
                    i += 1
                    m = re.match('(\d+)(:\d+)?', b[i:])
                    if not m:
                        eprint('Bad immediate', name, b[i:])
                        exit(-1)
                    hi = int(m.group(1))
                    lo = hi
                    if m.group(2):
                        lo = int(m.group(2)[1:])
                    tuple.append((hi, lo))
                    i += len(m.group(0))
                    if hi >= 16:  bigimm = 1
                for (hi, lo) in reversed(tuple[1:]):
                    shift = lo and '<<{:d}'.format(lo) or ''
                    immed.append('x({:d},{:d}){:s}'.format(pos, hi-lo+1, shift))
                    pos += hi-lo+1
                (hi, lo) = tuple[0]
                shift = lo and '<<{:d}'.format(lo) or ''
                immed.append('{:s}({:d},{:d}){:s}'.format(signed and 'xs' or 'x', pos, hi-lo+1, shift))
                pos += hi-lo+1
            else:
                (lo, width, reg, offset) = regs[b]
                registers.append('i.{:s}=x({:d},{:d}){:s}'.format(reg, lo, width, offset))
                pos += width
        if pos == 16:
            opcodes[name]['len'] = 2
            biginsn = 0
            f.write('  if((b&0x{:04x})==0x{:04x})'.format(mask, code))
        elif pos == 32:
            opcodes[name]['len'] = 4
            biginsn = 1
            f.write('  if((b&0x{:08x})==0x{:08x})'.format(mask, code))
        else:
            eprint('Illegal length', name, pos, 'bits', opcodes[name]['bits'])
            eprint(immed)
            exit(-1)
        f.write(' {{ i=Insn_t(Op_{:s},{:d},{:d});\t'.format(name.replace('.','_'), biginsn, bigimm))
        f.write('; '.join(registers))
        if immed:
            f.write(';\ti.{:s}={:s}'.format(bigimm and 'op_immed' or 'op.imm', '|'.join(immed)))
        f.write('; return i; }\n')
diffcp('decoder.h')

with open('newcode.tmp', 'w') as f:
    for name in opcodes:
        f.write('long I_{:s}(long pc, processor_t* p);\n'.format(name.replace('.','_')))
    f.write('\n')
    f.write('long (*golden[])(long pc, processor_t* p) = {')
    i = 0
    for name in ['ZERO'] + list(opcodes.keys()) + ['ILLEGAL', 'UNKNOWN']:
        if i % 4 == 0:
            f.write('\n  ')
        f.write('&I_{:21s}'.format(name.replace('.','_')+','))
        i += 1
    f.write('\n};\n')
diffcp('dispatch_table.h')

with open('newcode.tmp', 'w') as f:
    f.write('const char* op_name[] = {')
    i = 0
    for name in ['ZERO'] + list(opcodes.keys()) + ['ILLEGAL', 'UNKNOWN']:
        if i % 4 == 0:
            f.write('\n  ')
        f.write('{:24s}'.format('"'+name.replace('.','_')+'",'))
        i += 1
    f.write('\n};\n')
diffcp('constants.h')

if not os.path.exists('./insns'):
    os.mkdir('./insns')
    
for name in opcodes:
    with open('newcode.tmp', 'w') as f:
        opcode = opcodes[name]
        f.write('#include "../interpreter.h"\n')
        f.write('long I_{:s}(long pc, processor_t* p) {{\n'.format(name.replace('.','_')))
        f.write('  insn_t insn = *(int{:d}_t*)pc;\n'.format(opcode['len']*8))
        if not 'flags' in opcode:
            eprint('No flags for', name)
        if 'pc' in opcode['flags']:
            f.write('  long npc = pc + {:d};\n'.format(opcode['len']))
        for line in opcodes[name]["exec"].split('\n'):
            if line:
                f.write('  {:s}\n'.format(line))
        if 'pc' in opcode['flags']:
            f.write('  return npc;\n')
        else:
            f.write('  return pc + {:d};\n'.format(opcode['len']))
        f.write('}\n')
    diffcp('./insns/{:s}.cc'.format(name.replace('.','_')))
