#!/usr/bin/env python

from builtins import hex
from builtins import range
import math
import sys
import re
import os
import json
from collections import OrderedDict

def eprint(*args):
    sys.stderr.write(' '.join(map(str,args)) + '\n')
    
def diffcp(fname):
    if os.path.exists(fname) and os.system('cmp -s newcode.tmp '+fname) == 0:
        os.system('rm newcode.tmp')
    else:
        os.system('mv newcode.tmp '+fname)

opcodes = OrderedDict()
with open(sys.argv[1]) as f:
    opcodes = json.load(f)

with open('newcode.tmp', 'w') as f:
    for name in opcodes:
        if 'decode' not in opcodes[name]:
            continue;
        (mask, code, registers, immed, bigimm) = opcodes[name]['decode'].split()
        mask = int(mask, 16)
        code = int(code, 16)
        registers = registers.split(';')
        bigimm = int(bigimm)
        if opcodes[name]['len'] == 2:
            f.write('  if((b&0x{:04x})==0x{:04x}) {{ '.format(mask, code))
        else:
            f.write('  if((b&0x{:08x})==0x{:08x}) {{ '.format(mask, code))
        if bigimm == 1:
            f.write('i=reg0imm(Op_{:s}, {:s}, {:s});'.format(name.replace('.','_'), registers[0], immed))
        elif registers[3] != 'NOREG':
            f.write('i=reg3insn(Op_{:s}, {:s}, {:s}, {:s}, {:s});'.format(name.replace('.','_'), registers[0], registers[1], registers[2], registers[3]))
        elif immed == 'NONE':
            if registers[2] != 'NOREG':
                f.write('i=reg2insn(Op_{:s}, {:s}, {:s}, {:s});'.format(name.replace('.','_'), registers[0], registers[1], registers[2]))
            else:
                f.write('i=reg1insn(Op_{:s}, {:s}, {:s});'.format(name.replace('.','_'), registers[0], registers[1]))
        else:
            if registers[2] != 'NOREG':
                f.write('i=reg2imm(Op_{:s}, {:s}, {:s}, {:s}, {:s});'.format(name.replace('.','_'), registers[0], registers[1], registers[2], immed))
            else:
                f.write('i=reg1imm(Op_{:s}, {:s}, {:s}, {:s});'.format(name.replace('.','_'), registers[0], registers[1], immed))
        f.write(' goto opcode_found; }\n')
diffcp('decoder.h')

with open('newcode.tmp', 'w') as f:
    f.write('enum Opcode_t : short {')
    n = 0
    for name in opcodes:
        if 'len' in opcodes[name] and opcodes[name]['len'] <= 2:
            last_compressed_opcode = name
        if n % 8 == 0:
            f.write('\n  ')
        f.write('{:24s}'.format('Op_' + name.replace('.','_') + ','))
        n += 1
    f.write('};\n')
    
    f.write('const Opcode_t Last_Compressed_Opcode = Op_{:s};\n'.format(last_compressed_opcode.replace('.','_')))
diffcp('opcodes.h')

with open('newcode.tmp', 'w') as f:
    for name in opcodes:
        if 'bits' in opcodes[name]:
            f.write('long I_{:s}(long pc, mmu_t& MMU, class processor_t* cpu);\n'.format(name.replace('.','_')))
    f.write('\n')
    f.write('long (*golden[])(long pc, mmu_t& MMU, class processor_t* cpu) = {')
    i = 0
    for name in opcodes:
        if i % 4 == 0:
            f.write('\n  ')
        if name in opcodes and 'bits' in opcodes[name]:
            f.write('&I_{:21s}'.format(name.replace('.','_')+','))
        else:
            f.write('{:24s}'.format('0,'))
        i += 1
    f.write('\n};\n')
diffcp('dispatch_table.h')

with open('newcode.tmp', 'w') as f:
    f.write('const char* op_name[] = {')
    i = 0
    for name in opcodes:
        if i % 4 == 0:
            f.write('\n  ')
        name2 = name.replace('.','_')
        f.write('{:24s}'.format('"'+name2+'",'))
        i += 1
    f.write('\n};\n')
diffcp('constants.h')

if not os.path.exists('./insns'):
    os.mkdir('./insns')

for name in opcodes:
    if 'exec' not in opcodes[name]:
        continue
    with open('newcode.tmp', 'w') as f:
        opcode = opcodes[name]
        f.write('#include "mmu.h"\n')
        f.write('long I_{:s}(long pc, mmu_t& MMU, class processor_t* p) {{\n'.format(name.replace('.','_')))
        f.write('  insn_t insn = (long)(*(int{:d}_t*)pc);\n'.format(opcode['len']==2 and 16 or 32))
        if 'flags' in opcode and 'pc' in opcode['flags']:
            f.write('  long npc = pc + {:d};\n'.format(opcode['len']))
        for line in opcode["exec"].split('\n'):
            if line:
                f.write('  {:s}\n'.format(line))
        if 'flags' in opcode and 'pc' in opcode['flags']:
            f.write('  return npc;\n')
        else:
            f.write('  return pc + {:d};\n'.format(opcode['len']))
        f.write('}\n')
    diffcp('./insns/{:s}.cc'.format(name.replace('.','_')))

with open('newcode.tmp', 'w') as f:
    n = 0
    for name in opcodes:
        opcode = opcodes[name]
        if 'fast' not in opcode:
            continue;
        f.write('case Op_{:s}:  {:s}; pc+={:d}; break;\n'.format(name.replace('.','_'), opcode['fast'], opcode['len']))
        n += 1
    if n == 0:
        f.write('#define NOFASTOPS\n')
diffcp('fastops.h')
