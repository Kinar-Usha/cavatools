// Do not define SOFT_FP
#ifndef NO_FP_MACROS
#define FMADD32( rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).f =  (FR(rs1).f * FR(rs2).f) + FR(rs3).f; boxnan(rd); SET_FPX; RRM(rm);
#define FMADD32_dyn(rd, rs1, rs2, rs3) FR(rd).f =  (FR(rs1).f * FR(rs2).f) + FR(rs3).f; boxnan(rd); SET_FPX;
#define FMSUB32( rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).f =  (FR(rs1).f * FR(rs2).f) - FR(rs3).f; boxnan(rd); SET_FPX; RRM(rm);
#define FMSUB32_dyn(rd, rs1, rs2, rs3) FR(rd).f =  (FR(rs1).f * FR(rs2).f) - FR(rs3).f; boxnan(rd); SET_FPX;
#define FNMADD32(rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).f = -(FR(rs1).f * FR(rs2).f) - FR(rs3).f; boxnan(rd); SET_FPX; RRM(rm);
#define FNMADD32_dyn(rd, rs1, rs2, rs3) FR(rd).f = -(FR(rs1).f * FR(rs2).f) - FR(rs3).f; boxnan(rd); SET_FPX;
#define FNMSUB32(rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).f = -(FR(rs1).f * FR(rs2).f) + FR(rs3).f; boxnan(rd); SET_FPX; RRM(rm);
#define FNMSUB32_dyn(rd, rs1, rs2, rs3) FR(rd).f = -(FR(rs1).f * FR(rs2).f) + FR(rs3).f; boxnan(rd); SET_FPX;
#define FMADD64( rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).d =  (FR(rs1).d * FR(rs2).d) + FR(rs3).d; SET_FPX; RRM(rm);
#define FMADD64_dyn(rd, rs1, rs2, rs3) FR(rd).d =  (FR(rs1).d * FR(rs2).d) + FR(rs3).d; SET_FPX;
#define FMSUB64( rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).d =  (FR(rs1).d * FR(rs2).d) - FR(rs3).d; SET_FPX; RRM(rm);
#define FMSUB64_dyn(rd, rs1, rs2, rs3) FR(rd).d =  (FR(rs1).d * FR(rs2).d) - FR(rs3).d; SET_FPX;
#define FNMADD64(rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).d = -(FR(rs1).d * FR(rs2).d) - FR(rs3).d; SET_FPX; RRM(rm);
#define FNMADD64_dyn(rd, rs1, rs2, rs3) FR(rd).d = -(FR(rs1).d * FR(rs2).d) - FR(rs3).d; SET_FPX;
#define FNMSUB64(rm, rd, rs1, rs2, rs3) SRM(rm); FR(rd).d = -(FR(rs1).d * FR(rs2).d) + FR(rs3).d; SET_FPX; RRM(rm);
#define FNMSUB64_dyn(rd, rs1, rs2, rs3) FR(rd).d = -(FR(rs1).d * FR(rs2).d) + FR(rs3).d; SET_FPX;
#define FADD32(rm, rd, rs1, rs2) SRM(rm); FR(rd).f = FR(rs1).f + FR(rs2).f; boxnan(rd); SET_FPX; RRM(rm);
#define FADD32_dyn(rd, rs1, rs2) FR(rd).f = FR(rs1).f + FR(rs2).f; boxnan(rd); SET_FPX;
#define FSUB32(rm, rd, rs1, rs2) SRM(rm); FR(rd).f = FR(rs1).f - FR(rs2).f; boxnan(rd); SET_FPX; RRM(rm);
#define FSUB32_dyn(rd, rs1, rs2) FR(rd).f = FR(rs1).f - FR(rs2).f; boxnan(rd); SET_FPX;
#define FMUL32(rm, rd, rs1, rs2) SRM(rm); FR(rd).f = FR(rs1).f * FR(rs2).f; boxnan(rd); SET_FPX; RRM(rm);
#define FMUL32_dyn(rd, rs1, rs2) FR(rd).f = FR(rs1).f * FR(rs2).f; boxnan(rd); SET_FPX;
#define FDIV32(rm, rd, rs1, rs2) SRM(rm); FR(rd).f = FR(rs1).f / FR(rs2).f; boxnan(rd); SET_FPX; RRM(rm);
#define FDIV32_dyn(rd, rs1, rs2) FR(rd).f = FR(rs1).f / FR(rs2).f; boxnan(rd); SET_FPX;
#define FADD64(rm, rd, rs1, rs2) SRM(rm); FR(rd).d = FR(rs1).d + FR(rs2).d; SET_FPX; RRM(rm);
#define FADD64_dyn(rd, rs1, rs2) FR(rd).d = FR(rs1).d + FR(rs2).d; SET_FPX;
#define FSUB64(rm, rd, rs1, rs2) SRM(rm); FR(rd).d = FR(rs1).d - FR(rs2).d; SET_FPX; RRM(rm);
#define FSUB64_dyn(rd, rs1, rs2) FR(rd).d = FR(rs1).d - FR(rs2).d; SET_FPX;
#define FMUL64(rm, rd, rs1, rs2) SRM(rm); FR(rd).d = FR(rs1).d * FR(rs2).d; SET_FPX; RRM(rm);
#define FMUL64_dyn(rd, rs1, rs2) FR(rd).d = FR(rs1).d * FR(rs2).d; SET_FPX;
#define FDIV64(rm, rd, rs1, rs2) SRM(rm); FR(rd).d = FR(rs1).d / FR(rs2).d; SET_FPX; RRM(rm);
#define FDIV64_dyn(rd, rs1, rs2) FR(rd).d = FR(rs1).d / FR(rs2).d; SET_FPX;
#define FSQRT32(rm, rd, rs1) SRM(rm); FR(rd).f = sqrtf(FR(rs1).f); boxnan(rd); SET_FPX; RRM(rm);
#define FSQRT32_dyn(rd, rs1) FR(rd).f = sqrtf(FR(rs1).f); boxnan(rd); SET_FPX;
#define FSQRT64(rm, rd, rs1) SRM(rm); FR(rd).d = sqrt (FR(rs1).d); SET_FPX; RRM(rm);
#define FSQRT64_dyn(rd, rs1) FR(rd).d = sqrt (FR(rs1).d); SET_FPX;
#define FCVTWS( rm, rd, rs1) SRM(rm); IR(rd).l  = (long)(          int)FR(rs1).f; SET_FPX; RRM(rm);
#define FCVTWS_dyn(rd, rs1) IR(rd).l  = (long)(          int)FR(rs1).f; SET_FPX;
#define FCVTWUS(rm, rd, rs1) SRM(rm); IR(rd).l  = (long)(unsigned  int)FR(rs1).f; SET_FPX; RRM(rm);
#define FCVTWUS_dyn(rd, rs1) IR(rd).l  = (long)(unsigned  int)FR(rs1).f; SET_FPX;
#define FCVTLS( rm, rd, rs1) SRM(rm); IR(rd).l  =       (         long)FR(rs1).f ; SET_FPX; RRM(rm);
#define FCVTLS_dyn(rd, rs1) IR(rd).l  =       (         long)FR(rs1).f ; SET_FPX;
#define FCVTLUS(rm, rd, rs1) SRM(rm); IR(rd).ul =       (unsigned long)FR(rs1).f; SET_FPX; RRM(rm);
#define FCVTLUS_dyn(rd, rs1) IR(rd).ul =       (unsigned long)FR(rs1).f; SET_FPX;
#define FCVTWD( rm, rd, rs1) SRM(rm); IR(rd).l  = (long)(          int)FR(rs1).d; SET_FPX; RRM(rm);
#define FCVTWD_dyn(rd, rs1) IR(rd).l  = (long)(          int)FR(rs1).d; SET_FPX;
#define FCVTWUD(rm, rd, rs1) SRM(rm); IR(rd).l  = (long)(unsigned  int)FR(rs1).d; SET_FPX; RRM(rm);
#define FCVTWUD_dyn(rd, rs1) IR(rd).l  = (long)(unsigned  int)FR(rs1).d; SET_FPX;
#define FCVTLD( rm, rd, rs1) SRM(rm); IR(rd).l  =       (         long)FR(rs1).d; SET_FPX; RRM(rm);
#define FCVTLD_dyn(rd, rs1) IR(rd).l  =       (         long)FR(rs1).d; SET_FPX;
#define FCVTLUD(rm, rd, rs1) SRM(rm); IR(rd).ul =       (unsigned long)FR(rs1).d; SET_FPX; RRM(rm);
#define FCVTLUD_dyn(rd, rs1) IR(rd).ul =       (unsigned long)FR(rs1).d; SET_FPX;
#define FCVTSW( rm, rd, rs1) SRM(rm); FR(rd).f = (float)IR(rs1).i;  boxnan(rd); SET_FPX; RRM(rm);
#define FCVTSW_dyn(rd, rs1) FR(rd).f = (float)IR(rs1).i;  boxnan(rd); SET_FPX;
#define FCVTSWU(rm, rd, rs1) SRM(rm); FR(rd).f = (float)IR(rs1).ui; boxnan(rd); SET_FPX; RRM(rm);
#define FCVTSWU_dyn(rd, rs1) FR(rd).f = (float)IR(rs1).ui; boxnan(rd); SET_FPX;
#define FCVTSL( rm, rd, rs1) SRM(rm); FR(rd).f = (float)IR(rs1).l;  boxnan(rd); SET_FPX; RRM(rm);
#define FCVTSL_dyn(rd, rs1) FR(rd).f = (float)IR(rs1).l;  boxnan(rd); SET_FPX;
#define FCVTSLU(rm, rd, rs1) SRM(rm); FR(rd).f = (float)IR(rs1).ul; boxnan(rd); SET_FPX; RRM(rm);
#define FCVTSLU_dyn(rd, rs1) FR(rd).f = (float)IR(rs1).ul; boxnan(rd); SET_FPX;
#define FCVTDW( rm, rd, rs1) SRM(rm); FR(rd).d = (double)IR(rs1).i; SET_FPX; RRM(rm);
#define FCVTDW_dyn(rd, rs1) FR(rd).d = (double)IR(rs1).i; SET_FPX;
#define FCVTDWU(rm, rd, rs1) SRM(rm); FR(rd).d = (double)IR(rs1).ui; SET_FPX; RRM(rm);
#define FCVTDWU_dyn(rd, rs1) FR(rd).d = (double)IR(rs1).ui; SET_FPX;
#define FCVTDL( rm, rd, rs1) SRM(rm); FR(rd).d = (double)IR(rs1).l ; SET_FPX; RRM(rm);
#define FCVTDL_dyn(rd, rs1) FR(rd).d = (double)IR(rs1).l ; SET_FPX;
#define FCVTDLU(rm, rd, rs1) SRM(rm); FR(rd).d = (double)IR(rs1).ul; SET_FPX; RRM(rm);
#define FCVTDLU_dyn(rd, rs1) FR(rd).d = (double)IR(rs1).ul; SET_FPX;
#define FCVTSD(rm, rd, rs1) SRM(rm); FR(rd).f = (float )FR(rs1).d; boxnan(rd); SET_FPX; RRM(rm);
#define FCVTSD_dyn(rd, rs1) FR(rd).f = (float )FR(rs1).d; boxnan(rd); SET_FPX;
#define FCVTDS(rm, rd, rs1) SRM(rm); FR(rd).d = (double)FR(rs1).f; SET_FPX; RRM(rm);
#define FCVTDS_dyn(rd, rs1) FR(rd).d = (double)FR(rs1).f; SET_FPX;
#define FEQS(rd, rs1, rs2) IR(rd).l = (FR(rs1).f == FR(rs2).f) ? 1:0; SET_FPX;
#define FLTS(rd, rs1, rs2) IR(rd).l = (FR(rs1).f <  FR(rs2).f) ? 1:0; SET_FPX;
#define FLES(rd, rs1, rs2) IR(rd).l = (FR(rs1).f <= FR(rs2).f) ? 1:0; SET_FPX;
#define FEQD(rd, rs1, rs2) IR(rd).l = (FR(rs1).d == FR(rs2).d) ? 1:0; SET_FPX;
#define FLTD(rd, rs1, rs2) IR(rd).l = (FR(rs1).d <  FR(rs2).d) ? 1:0; SET_FPX;
#define FLED(rd, rs1, rs2) IR(rd).l = (FR(rs1).d <= FR(rs2).d) ? 1:0; SET_FPX;
#define FMINS(rd, rs1, rs2) FR(rd).f = (FR(rs1).f < FR(rs2).f) ? FR(rs1).f : FR(rs2).f; boxnan(rd); SET_FPX;
#define FMAXS(rd, rs1, rs2) FR(rd).f = (FR(rs1).f > FR(rs2).f) ? FR(rs1).f : FR(rs2).f; boxnan(rd); SET_FPX;
#define FMIND(rd, rs1, rs2) FR(rd).d = (FR(rs1).d < FR(rs2).d) ? FR(rs1).d : FR(rs2).d; SET_FPX;
#define FMAXD(rd, rs1, rs2) FR(rd).d = (FR(rs1).d > FR(rs2).d) ? FR(rs1).d : FR(rs2).d; SET_FPX;
#endif
